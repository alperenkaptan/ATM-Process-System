// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Context;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(AtmDBContext))]
    partial class AtmDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication2.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerEmail = "alperen9792@gmail.com",
                            CustomerName = "testUser",
                            CustomerPassword = "testPassword"
                        });
                });

            modelBuilder.Entity("WebApplication2.Entities.CustomerTransaction", b =>
                {
                    b.Property<Guid>("CustomerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionNumber"));

                    b.HasKey("CustomerTransactionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerTransaction");

                    b.HasData(
                        new
                        {
                            CustomerTransactionId = new Guid("e3bd21ee-de46-4bf1-ab99-39ca20cea4d8"),
                            CustomerId = 1,
                            Money = 100.0,
                            TransactionDate = new DateTime(2022, 11, 28, 17, 15, 20, 585, DateTimeKind.Local).AddTicks(1201),
                            TransactionNumber = 10000
                        },
                        new
                        {
                            CustomerTransactionId = new Guid("96dac919-3141-4ca8-afdc-4e33e89f5aec"),
                            CustomerId = 1,
                            Money = -25.0,
                            TransactionDate = new DateTime(2022, 11, 28, 17, 15, 20, 585, DateTimeKind.Local).AddTicks(1247),
                            TransactionNumber = 10001
                        });
                });

            modelBuilder.Entity("WebApplication2.Entities.CustomerTransaction", b =>
                {
                    b.HasOne("WebApplication2.Entities.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApplication2.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
